{
	"info": {
		"_postman_id": "375d2da3-516b-482d-8c2e-4734d3a79918",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21757378"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port2}}/first",
					"host": [
						"{{ip_port2}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3 tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let req_f = request.data\r",
							"// console.log(\"name \" + req_f.name)\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"pm.test(\"4.Check_name(handy input)\", function () {\r",
							"    pm.expect(resp_f.name).to.eql(\"Tanya\");\r",
							"});\r",
							"pm.test(\"5.Check_age(handy input)\", function () {\r",
							"    pm.expect(+resp_f.age).to.eql(39);\r",
							"});\r",
							"pm.test(\"6.Check_salary(handy input)\", function () {\r",
							"    pm.expect(resp_f.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"\r",
							"let resp_name = resp_f.name\r",
							"let resp_age = +resp_f.age\r",
							"let req_age = +req_f.age\r",
							"let resp_salary = +resp_f.salary\r",
							"let req_salary = +req_f.salary\r",
							"\r",
							"console.log(\"req_age - \" +typeof req_age)\r",
							"console.log(\"resp_age - \" +typeof resp_age)\r",
							"\r",
							"pm.test(\"8.Check_name_in_response\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_f.name);\r",
							"});\r",
							"\r",
							"pm.test(\"9.Check_age_in_response\", function () {\r",
							"    pm.expect (resp_age).to.eql(req_age);\r",
							" });\r",
							"\r",
							"pm.test(\"10.Check_salary_in_response\", function () {\r",
							"    pm.expect (resp_salary).to.eql(req_salary);\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tanya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port2}}/user_info_3",
					"host": [
						"{{ip_port2}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3 tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let req_f = request.data\r",
							"let resp_f = pm.response.json();\r",
							"req_f = pm.request.url.query.toObject()\r",
							"\r",
							"let resp_name = resp_f.name\r",
							"let resp_age = +resp_f.age\r",
							"let req_age = +req_f.age\r",
							"let resp_salary = +resp_f.salary\r",
							"let req_salary = +req_f.salary\r",
							"let params_dog = resp_f.family.pets.dog\r",
							"let name_dog = resp_f.family.pets.dog.name\r",
							"let age_dog = +resp_f.family.pets.dog.age\r",
							"// console.log(\"Dog____\" +JSON.stringify(params_dog))\r",
							"// console.log (\"resp_salary is \" + typeof resp_salary)\r",
							"pm.test(\"5.Check_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_f.name);\r",
							"});\r",
							"\r",
							"pm.test(\"6.Check_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"pm.test(\"7.Check_salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"console.log (\"8.Family-----\" + JSON.stringify(resp_f.family))\r",
							"\r",
							"pm.test(\"9.Check_dog_key\", function () {\r",
							"    pm.expect(params_dog).to.have.property(\"name\");\r",
							"});\r",
							"pm.test(\"10.Check_dogs_age\", function () {\r",
							"    pm.expect(params_dog).to.have.property(\"age\");\r",
							"});\r",
							"pm.test(\"Check_dogs_name_type\", function () {\r",
							"    pm.expect(name_dog).to.be.a(\"String\");\r",
							"});\r",
							"pm.test(\"11.Check_dogs_name\", function () {\r",
							"    pm.expect(name_dog).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test(\"12. Check_dogs_age_eql\", function () {\r",
							"    pm.expect(age_dog).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port2}}/object_info_3?name=Tanya&age=39&salary=1000",
					"host": [
						"{{ip_port2}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4 tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let req_f = request.data\r",
							"let resp_f = pm.response.json();\r",
							"req_f = pm.request.url.query.toObject()\r",
							"\r",
							"let resp_name = resp_f.name\r",
							"let resp_age = +resp_f.age\r",
							"let req_age = +req_f.age\r",
							"let resp_salary = resp_f.salary\r",
							"let req_salary = +req_f.salary\r",
							"\r",
							"pm.test(\"5.Check_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_f.name);\r",
							"});\r",
							"\r",
							"pm.test(\"6.Check_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"// task 7\r",
							"console.log(\"req_salary is \" + req_salary) \r",
							"// task 8\r",
							"console.log(\"resp_salary is \" + resp_salary)\r",
							"// task 9\r",
							"console.log(\"resp_salary is \" + resp_salary[0])\r",
							"// task 10\r",
							"console.log(\"resp_salary is \" + resp_salary[1]+\",\"+ resp_salary)\r",
							"// task 11\r",
							"console.log(\"resp_salary is \" + resp_salary[2]+\",\"+ resp_salary)\r",
							"\r",
							"pm.test(\"12.Check_param_0_salary\", function () {\r",
							"    pm.expect(+resp_salary[0]).to.eql(req_salary);\r",
							"});\r",
							"pm.test(\"13.Check_param_1_salary\", function () {\r",
							"    pm.expect(+resp_salary[1]).to.eql(req_salary *2);\r",
							"});\r",
							"pm.test(\"14.Check_param_2_salary\", function () {\r",
							"    pm.expect(+resp_salary[2]).to.eql(req_salary *3);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\", req_f.name)\r",
							"pm.environment.set(\"age\", req_f.age);\r",
							"pm.environment.set(\"salary\", req_f.salary);\r",
							"\r",
							"for (n in resp_salary) {console.log (n, resp_salary [n])}\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port2}}/object_info_4?name=Tanya&age=38&salary=1000",
					"host": [
						"{{ip_port2}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2 tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let req_f = request.data\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"let resp_start_qa_salary = + resp_f.start_qa_salary\r",
							"let resp_qa_salary_after_6_months = + resp_f.qa_salary_after_6_months\r",
							"let resp_qa_salary_after_12_months = + resp_f.qa_salary_after_12_months\r",
							"let resp_salary_1_5_years = +resp_f[\"qa_salary_after_1.5_year\"]\r",
							"let resp_salary_3_5_years = +resp_f[\"qa_salary_after_3.5_years\"]\r",
							"let resp_u_name = +resp_f.person.u_name[1]\r",
							"let resp_u_age = +resp_f.person.u_age\r",
							"let resp_u_salary_5_years = +resp_f.person.u_salary_5_years\r",
							"\r",
							"// console.log(resp_f.person.u_name[0])\r",
							"pm.test(\"8.Check_start_qa_salary\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"pm.test(\"9.Check_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"10.Check_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"11.Check_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"12.Check_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"pm.test(\"13.Check_person\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"pm.test(\"14.Check_start_qa_salary\", function () {\r",
							"    pm.expect(resp_start_qa_salary).to.eql(+req_f.salary);\r",
							"});\r",
							"// console.log(\"req_salary is \" + typeof req_f.salary)\r",
							"// console.log(\"resp_salary is \" + typeof resp_start_qa_salary)\r",
							"\r",
							"pm.test(\"15.Check_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_qa_salary_after_6_months).to.eql(+req_f.salary *2);\r",
							"});\r",
							"\r",
							"pm.test(\"16.Check_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_qa_salary_after_12_months).to.eql(+req_f.salary *2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"17.Check_qa_salary_after_1.5_years\", function () {\r",
							"    pm.expect(resp_salary_1_5_years).to.eql(+req_f.salary *3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"18.Check_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_salary_3_5_years).to.eql(+req_f.salary *3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"19.Check_person_u_name\", function () {\r",
							"    pm.expect(+resp_u_name).to.eql(+req_f.salary);\r",
							"});\r",
							"pm.test(\"20.Check_person_u_age\", function () {\r",
							"    pm.expect(+resp_u_age).to.eql(+req_f.age);\r",
							"});\r",
							"pm.test(\"21.Check_u_salary_5_years\", function () {\r",
							"    pm.expect(+resp_u_salary_5_years).to.eql(+req_f.salary *4.2);\r",
							"});\r",
							"\r",
							"for (n in resp_f.person) {console.log(n +\"----\"+ JSON.stringify(resp_f.person[n]))}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port2}}/user_info_2",
					"host": [
						"{{ip_port2}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Tetiana",
							"disabled": true
						},
						{
							"key": "age",
							"value": "38",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					""
				]
			}
		}
	]
}